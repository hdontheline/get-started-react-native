https://facebook.github.io/react-native/docs/getting-started

Installed React-Native using homebrew.

I did come across an issue when starting this as I installed node.js incorrectly. 
    Had to uninstall it completely from my Mac machine to begin this setup again using homebrew.

react-native init AwesomeProject
    The command used to create a React Native project.

need to cd AwesomeProject

To run the application on my machine, to get the iOS emulator up. The command issue react-native run-ios

Next Step: https://facebook.github.io/react-native/docs/tutorial


#Learn the basics
    React Native is like React, but it uses native components instead of web components as building blocks

    import, from, class, and extends in the example above are all ES2015 features
    https://babeljs.io/learn-es2015/

    <View><Text>Hello world!</Text></View>. This is JSX - a syntax for embedding XML within JavaScript.
    <Text> is a built-in component that just displays some text and View is like the <div> or <span>.

    So this code is defining HelloWorldApp, a new Componentthe only thing that's required is a render function which returns some JSX to render.


#Props
    Most components can be customized when they are created, with different parameters. These creation parameters are called props.
    For example, one basic React Native component is the Image. When you create an image, you can use a prop named source to control what image it shows.

    braces surrounding {pic} - these embed the variable pic into JSX. You can put any JavaScript expression inside braces in JSX.

    Your own components can also use props. This lets you make a single component that is used in many different places in your app, with slightly different properties in each place. Just refer to this.props in your render function.

    A View is useful as a container for other components, to help control style and layout.    

    With props and the basic Text, Image, and View components, you can build a wide variety of static screens. 

#State 
    There are two types of data that control a component: props and state. 
    props are set by the parent and they are fixed throughout the lifetime of a component. 
    For data that is going to change, we have to use state.

    In general, you should initialize state in the constructor, and then call setState when you want to change it.

    You might set state when you have new data arrived from the server, or from user input. 
    
    You can also use a state container like Redux or Mobx to control your data flow. 
    In that case you would use Redux or Mobx to modify your state rather than calling setState directly.

    State works the same way as it does in React, so for more details on handling state, you can look at the React.Component API. 

#Style 
    you don't use a special language or syntax for defining styles. 
    You just style your application using JavaScript. All of the core components accept a prop named style. 
    The style names and values usually match how CSS works on the web, except names are written using camel casing, 
    e.g backgroundColor rather than background-color.

    The style prop can be a plain old JavaScript object. That's the simplest and what we usually use for example code. 
    You can also pass an array of styles - the last style in the array has precedence, so you can use this to inherit styles.

    As a component grows in complexity, it is often cleaner to use StyleSheet.create to define several styles in one place.


    One common pattern is to make your component accept a style prop which in turn is used to style subcomponents. 
    You can use this to make styles "cascade" the way they do in CSS.

#Height and Width

The simplest way to set the dimensions of a component is by adding a fixed width and height to style. 
All dimensions in React Native are unitless, and represent density-independent pixels.



